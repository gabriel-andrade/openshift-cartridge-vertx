#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

version=${OPENSHIFT_VERTX_VERSION}

logf="$OPENSHIFT_VERTX_LOG_DIR/console.log"

VERTX_HOME=${OPENSHIFT_VERTX_DIR}/usr/vert.x-$version
VERTX_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/vertx.pid

# Check if the vertx process is running
function isrunning() {
  # Check for running app
  if [ -f "$VERTX_PID_FILE" ]; then
    vertxpid=$(cat $VERTX_PID_FILE);
    if /bin/ps --pid $vertxpid 1>&2 >/dev/null;
    then
      return 0
    fi
  fi
 
  return 1
}

# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z $should_be_gone_pid ]; then
        return
    else
        kill -TERM ${_pid}
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z $should_be_gone_pid ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

function stop() {
  echo "Stopping Vert.x $version cartridge"
  
  if isrunning; then
    if [ -f "$VERTX_PID_FILE" ]; then
      pid=$(cat $VERTX_PID_FILE);
      echo "Sending SIGTERM to vertx:$pid ..." 1>&2
      killtree $pid
    else 
      echo "Failed to locate Vert.x PID File" 1>&2
    fi
  fi
}

function setup_hazelcast {
  # TODO: Figure out a better way to do this
  if [ -f "$OPENSHIFT_VERTX_DIR/versions/shared/conf/cluster.xml" ]; then
    cp $OPENSHIFT_VERTX_DIR/versions/shared/conf/cluster.xml $OPENSHIFT_VERTX_DIR/conf/
  fi

# No need for this cluster file at the moment
#  if [ -f "$OPENSHIFT_VERTX_DIR/versions/$version/conf/cluster.xml" ]; then
#    cp $OPENSHIFT_VERTX_DIR/versions/$version/conf/cluster.xml $OPENSHIFT_VERTX_DIR/conf/
#  fi
  
  if [ -z "$OPENSHIFT_VERTX_HAZELCAST_CLUSTER" ]; then
    OPENSHIFT_VERTX_HAZELCAST_CLUSTER="${OPENSHIFT_VERTX_IP}:${OPENSHIFT_VERTX_HAZELCAST_PORT}"
  fi
  
  OPENSHIFT_VERTX_PROXY_IP=$(ping -c 1 ${OPENSHIFT_GEAR_DNS} | awk '{ print $3 ; exit }' | sed 's/(//g' | sed 's/)//g')
  
  pushd $OPENSHIFT_VERTX_DIR > /dev/null
      sed -i  -e "s/\${env.OPENSHIFT_VERTX_HAZELCAST_PROXY_PORT}/${OPENSHIFT_VERTX_HAZELCAST_PROXY_PORT}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_HAZELCAST_PORT}/${OPENSHIFT_VERTX_HAZELCAST_PORT}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_PROXY_IP}/${OPENSHIFT_VERTX_PROXY_IP}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_IP}/${OPENSHIFT_VERTX_IP}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_HAZELCAST_CLUSTER}/${OPENSHIFT_VERTX_HAZELCAST_CLUSTER}/g" \
              ./conf/cluster.xml

  ## Add existen hazelcast cluster node as a member
  if [ ! -z "$OPENSHIFT_VERTX_CLUSTER_MEMBER_IP" ]; then
    sed -i "29i \        <members>${OPENSHIFT_VERTX_CLUSTER_MEMBER_IP}:${OPENSHIFT_VERTX_CLUSTER_MEMBER_PORT}</members>" ./conf/cluster.xml
  fi        
  popd > /dev/null
}

function start() {
  if isrunning; then
      echo "Vert.x is already running"
      return 0
  fi

  if [ ! -d "$OPENSHIFT_VERTX_DIR/usr/vert.x-$version" ]; then
    echo "Updating Vert.x $version cartridge"
    wget http://dl.bintray.com/vertx/downloads/vert.x-$version.tar.gz -O $OPENSHIFT_TMP_DIR/vert.x-$version.tar.gz

    rm -rf $OPENSHIFT_VERTX_DIR/usr/vert.x-*

    tar xzf $OPENSHIFT_TMP_DIR/vert.x-$version.tar.gz -C $OPENSHIFT_VERTX_DIR/usr/
    rm -f $OPENSHIFT_TMP_DIR/vert.x-$version.tar.gz

    echo "Leaving the existing configuration in vertx/conf directory."
    echo "You might want to copy over the new configuration files"
    echo "from vertx/vert.x-$version/conf directory."
    echo
  fi

  echo "Starting Vert.x $version cartridge"

  envf="$OPENSHIFT_REPO_DIR/configuration/vertx.env"
  #  Source environment if it exists.
  [ -f "$envf" ]  &&  source "$envf"

  # Determine variables to join cluster with other Vertx Application
  if [ "$vertx_cluster_member_ip" ]; then
    export OPENSHIFT_VERTX_CLUSTER_MEMBER_IP=$vertx_cluster_member_ip
  fi
  if [ "$vertx_cluster_member_port" ]; then
    declare -i member_port=$vertx_cluster_member_port
    export OPENSHIFT_VERTX_CLUSTER_MEMBER_PORT=$vertx_cluster_member_port
  fi

  #Determine variables to connect with Memcached server  
  if [ "$memcached_host" ]; then 
    export OPENSHIFT_MEMCACHED_HOST=$memcached_host
  fi
  if [ "$memcached_port" ]; then
    declare -i mem_port=$memcached_port
    export OPENSHIFT_MEMCACHED_PORT=$mem_port
  fi

  # Determine correct vertx run command (run, runmod, runzip). TODO: A nice feature would have vertx have one run command
  if [ "$vertx_zip" ]; then
    vertx_run="runzip $vertx_zip"
  fi
  if [ "$vertx_module" ]; then
    vertx_run="runmod $vertx_module"
  fi
  if [ "$vertx_app" ]; then
    vertx_run="run $vertx_app"
  fi
  if [ -z "$vertx_run" ]; then
    error "Could not determine how to run vertx. Make sure you have configured vertx_app|vertx_module|vertx_zip in $envf" 1>&2 1
  fi

  # Setup max heap and permgen
  if [ -z "$JVM_HEAP_RATIO" ]; then
    JVM_HEAP_RATIO=0.5
  fi
  if [ -z "$JVM_PERMGEN_RATIO" ]; then
    JVM_PERMGEN_RATIO=0.2
  fi
  max_memory_mb=${OPENSHIFT_GEAR_MEMORY_MB}
  max_heap=$( echo "$max_memory_mb * $JVM_HEAP_RATIO" | bc | awk '{print int($1+0.5)}')
  max_permgen=$( echo "$max_memory_mb * $JVM_PERMGEN_RATIO" | bc | awk '{print int($1+0.5)}')
  VERTX_OPTS="$VERTX_OPTS -Xmx${max_heap}m -XX:MaxPermSize=${max_permgen}m"
  export VERTX_OPTS

  # Setup clustering
  if [ "$OPENSHIFT_VERTX_HAZELCAST_PROXY_PORT" ]; then
    setup_hazelcast

    VERTX_OPTS="$VERTX_OPTS -Dvertx.cluster.public.host=${OPENSHIFT_VERTX_PROXY_IP} -Dvertx.cluster.public.port=${OPENSHIFT_VERTX_CLUSTER_PROXY_PORT}"

    vertx_cluster="-cluster -cluster-port $OPENSHIFT_VERTX_CLUSTER_PORT -cluster-host $OPENSHIFT_VERTX_IP"
  fi

  # Setup templates folder
  if [ -f $OPENSHIFT_REPO_DIR/configuration/ServerSideConfigService.json ]; then
    pushd $OPENSHIFT_REPO_DIR > /dev/null
      echo "Creating templates path"
      sed -i "s@\${env.REPO}@${OPENSHIFT_REPO_DIR}@g" configuration/ServerSideConfigService.json
    popd > /dev/null  
  fi

  # Start up vertx
  pushd $OPENSHIFT_REPO_DIR > /dev/null

    export CLASSPATH=$OPENSHIFT_VERTX_DIR/conf
    export VERTX_JUL_CONFIG=$OPENSHIFT_VERTX_DIR/conf/logging.properties
    export JAVA_HOME=/etc/alternatives/java_sdk_1.8.0
    $VERTX_HOME/bin/vertx $vertx_run $vertx_run_options $vertx_cluster >> $logf 2>&1 &
    
    PROCESS_ID=$!
    echo "$PROCESS_ID" > ${VERTX_PID_FILE}
  popd > /dev/null
}

function restart() {
  echo "Restarting Vert.x $version cartridge"
  stop
  start
}

function status() {
  if isrunning; then
    client_result "Application is running"
  else
    client_result "Application is either stopped or inaccessible"
  fi
}

# Clean up any log files
function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_VERTX_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_VERTX_LOG_DIR/*
}

function threaddump() {
  echo "Thread dump for Vert.x $version cartridge"

  if ! isrunning; then
    echo "Application is stopped"
    exit 1
  elif [ -f "$VERTX_PID_FILE" ]; then
    javapid=$(cat $VERTX_PID_FILE);
    kill -3 $javapid
    client_result "Success"
    client_result "The thread dump file will be available via:"
    client_result "rhc tail $OPENSHIFT_APP_NAME -g $OPENSHIFT_GEAR_UUID -f $logf -o '-n 250'"
  else
    echo "Failed to locate Vert.x PID File"
  fi
}

case "$1" in
  start)        start ;;
  stop)         stop ;;
  restart)      restart ;;
  status)       status ;;
  tidy)         tidy ;;
  threaddump)   threaddump ;;
  *)            exit 0
esac
